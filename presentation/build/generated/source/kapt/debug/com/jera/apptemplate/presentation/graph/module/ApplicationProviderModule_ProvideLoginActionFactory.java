// Generated by Dagger (https://google.github.io/dagger).
package com.jera.apptemplate.presentation.graph.module;

import android.content.Context;
import com.jera.apptemplate.domain.util.storage.Cache;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import kotlin.Unit;
import kotlin.jvm.functions.Function0;

public final class ApplicationProviderModule_ProvideLoginActionFactory
    implements Factory<Function0<Unit>> {
  private final ApplicationProviderModule module;

  private final Provider<Context> contextProvider;

  private final Provider<Cache> cacheProvider;

  public ApplicationProviderModule_ProvideLoginActionFactory(
      ApplicationProviderModule module,
      Provider<Context> contextProvider,
      Provider<Cache> cacheProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
    this.cacheProvider = cacheProvider;
  }

  @Override
  public Function0<Unit> get() {
    return Preconditions.checkNotNull(
        module.provideLoginAction(contextProvider.get(), cacheProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ApplicationProviderModule_ProvideLoginActionFactory create(
      ApplicationProviderModule module,
      Provider<Context> contextProvider,
      Provider<Cache> cacheProvider) {
    return new ApplicationProviderModule_ProvideLoginActionFactory(
        module, contextProvider, cacheProvider);
  }

  public static Function0<Unit> proxyProvideLoginAction(
      ApplicationProviderModule instance, Context context, Cache cache) {
    return Preconditions.checkNotNull(
        instance.provideLoginAction(context, cache),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
