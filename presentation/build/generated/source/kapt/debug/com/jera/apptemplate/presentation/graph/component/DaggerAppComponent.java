// Generated by Dagger (https://google.github.io/dagger).
package com.jera.apptemplate.presentation.graph.component;

import android.app.Activity;
import android.content.Context;
import android.support.v4.app.Fragment;
import com.google.gson.Gson;
import com.jakewharton.retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;
import com.jera.apptemplate.data.client.ApiClient;
import com.jera.apptemplate.data.client.ApiService;
import com.jera.apptemplate.data.mappers.ApiUserToUserMapper;
import com.jera.apptemplate.data.repository.DefaultUserRepository;
import com.jera.apptemplate.data.util.request.interceptor.AuthInterceptor_Factory;
import com.jera.apptemplate.data.util.storage.PreferencesCache;
import com.jera.apptemplate.data.util.storage.PreferencesCache_Factory;
import com.jera.apptemplate.domain.interactors.user.GetPersistedUser;
import com.jera.apptemplate.domain.interactors.user.LogIn;
import com.jera.apptemplate.domain.interactors.user.SignUp;
import com.jera.apptemplate.presentation.AppTemplateApplication;
import com.jera.apptemplate.presentation.AppTemplateApplication_MembersInjector;
import com.jera.apptemplate.presentation.graph.module.ActivityBindingModule_ContributeLoginScreen;
import com.jera.apptemplate.presentation.graph.module.ActivityBindingModule_ContributeSignUpScreen;
import com.jera.apptemplate.presentation.graph.module.ActivityBindingModule_ContributeSplashScreen;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideApiClientFactory;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideApiEndpointFactory;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideApiServiceFactory;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideGsonFactory;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideHttpLoggingInterceptorFactory;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideLogLevelFactory;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideOkHttpClientFactory;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideRetrofitFactory;
import com.jera.apptemplate.presentation.graph.module.ApiProviderModule_ProvideRxJavaCallAdapterFactory;
import com.jera.apptemplate.presentation.graph.module.ApplicationProviderModule;
import com.jera.apptemplate.presentation.graph.module.ApplicationProviderModule_ProvideLoginActionFactory;
import com.jera.apptemplate.presentation.view.splash.SplashActivity;
import com.jera.apptemplate.presentation.view.splash.SplashActivity_MembersInjector;
import com.jera.apptemplate.presentation.view.splash.SplashViewModel;
import com.jera.apptemplate.presentation.view.splash.SplashViewModel_Factory;
import com.jera.apptemplate.presentation.view.user.signin.LogInActivity;
import com.jera.apptemplate.presentation.view.user.signin.LogInActivity_MembersInjector;
import com.jera.apptemplate.presentation.view.user.signin.LogInViewModel;
import com.jera.apptemplate.presentation.view.user.signin.LogInViewModel_Factory;
import com.jera.apptemplate.presentation.view.user.signup.SignUpActivity;
import com.jera.apptemplate.presentation.view.user.signup.SignUpActivity_MembersInjector;
import com.jera.apptemplate.presentation.view.user.signup.SignUpViewModel;
import com.jera.apptemplate.presentation.view.user.signup.SignUpViewModel_Factory;
import com.jera.apptemplate.util.base.BaseActivity_MembersInjector;
import com.jera.apptemplate.util.base.BaseViewModel_MembersInjector;
import com.jera.apptemplate.util.error.ErrorHandler;
import com.jera.apptemplate.util.logger.AndroidLogger;
import com.jera.apptemplate.util.provider.DefaultSchedulerProvider;
import com.jera.apptemplate.util.resource.AndroidStrings;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetFactory;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlin.Unit;
import kotlin.jvm.functions.Function0;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;
import retrofit2.Retrofit;

public final class DaggerAppComponent implements AppComponent {
  private Context context;

  private ApplicationProviderModule applicationProviderModule;

  private Provider<ActivityBindingModule_ContributeSplashScreen.SplashActivitySubcomponent.Builder>
      splashActivitySubcomponentBuilderProvider;

  private Provider<ActivityBindingModule_ContributeLoginScreen.LogInActivitySubcomponent.Builder>
      logInActivitySubcomponentBuilderProvider;

  private Provider<ActivityBindingModule_ContributeSignUpScreen.SignUpActivitySubcomponent.Builder>
      signUpActivitySubcomponentBuilderProvider;

  private Provider<HttpLoggingInterceptor.Level> provideLogLevelProvider;

  private ApiProviderModule_ProvideHttpLoggingInterceptorFactory
      provideHttpLoggingInterceptorProvider;

  private AuthInterceptor_Factory authInterceptorProvider;

  private Provider<Set<Interceptor>> setOfInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<RxJava2CallAdapterFactory> provideRxJavaCallAdapterProvider;

  private Provider<Gson> provideGsonProvider;

  private Provider<String> provideApiEndpointProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ApiService> provideApiServiceProvider;

  private Provider<ApiClient> provideApiClientProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return MapBuilder
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            newMapBuilder(3)
        .put(SplashActivity.class, (Provider) splashActivitySubcomponentBuilderProvider)
        .put(LogInActivity.class, (Provider) logInActivitySubcomponentBuilderProvider)
        .put(SignUpActivity.class, (Provider) signUpActivitySubcomponentBuilderProvider)
        .build();
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private Function0<Unit> getNamedFunction0OfUnit() {
    return ApplicationProviderModule_ProvideLoginActionFactory.proxyProvideLoginAction(
        applicationProviderModule, context, new PreferencesCache());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.splashActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBindingModule_ContributeSplashScreen.SplashActivitySubcomponent.Builder>() {
          @Override
          public ActivityBindingModule_ContributeSplashScreen.SplashActivitySubcomponent.Builder
              get() {
            return new SplashActivitySubcomponentBuilder();
          }
        };
    this.logInActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBindingModule_ContributeLoginScreen.LogInActivitySubcomponent.Builder>() {
          @Override
          public ActivityBindingModule_ContributeLoginScreen.LogInActivitySubcomponent.Builder
              get() {
            return new LogInActivitySubcomponentBuilder();
          }
        };
    this.signUpActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBindingModule_ContributeSignUpScreen.SignUpActivitySubcomponent.Builder>() {
          @Override
          public ActivityBindingModule_ContributeSignUpScreen.SignUpActivitySubcomponent.Builder
              get() {
            return new SignUpActivitySubcomponentBuilder();
          }
        };
    this.context = builder.context;
    this.applicationProviderModule = builder.applicationProviderModule;
    this.provideLogLevelProvider =
        DoubleCheck.provider(
            ApiProviderModule_ProvideLogLevelFactory.create(builder.apiProviderModule));
    this.provideHttpLoggingInterceptorProvider =
        ApiProviderModule_ProvideHttpLoggingInterceptorFactory.create(
            builder.apiProviderModule, provideLogLevelProvider);
    this.authInterceptorProvider =
        AuthInterceptor_Factory.create((Provider) PreferencesCache_Factory.create());
    this.setOfInterceptorProvider =
        SetFactory.<Interceptor>builder(2, 0)
            .addProvider(provideHttpLoggingInterceptorProvider)
            .addProvider((Provider) authInterceptorProvider)
            .build();
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            ApiProviderModule_ProvideOkHttpClientFactory.create(
                builder.apiProviderModule, setOfInterceptorProvider));
    this.provideRxJavaCallAdapterProvider =
        DoubleCheck.provider(
            ApiProviderModule_ProvideRxJavaCallAdapterFactory.create(builder.apiProviderModule));
    this.provideGsonProvider =
        DoubleCheck.provider(
            ApiProviderModule_ProvideGsonFactory.create(builder.apiProviderModule));
    this.provideApiEndpointProvider =
        DoubleCheck.provider(
            ApiProviderModule_ProvideApiEndpointFactory.create(builder.apiProviderModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            ApiProviderModule_ProvideRetrofitFactory.create(
                builder.apiProviderModule,
                provideOkHttpClientProvider,
                provideRxJavaCallAdapterProvider,
                provideGsonProvider,
                provideApiEndpointProvider));
    this.provideApiServiceProvider =
        DoubleCheck.provider(
            ApiProviderModule_ProvideApiServiceFactory.create(
                builder.apiProviderModule, provideRetrofitProvider));
    this.provideApiClientProvider =
        DoubleCheck.provider(
            ApiProviderModule_ProvideApiClientFactory.create(
                builder.apiProviderModule, provideApiServiceProvider));
  }

  @Override
  public AppTemplateApplication inject(AppTemplateApplication appTemplateApplication) {
    return injectAppTemplateApplication(appTemplateApplication);
  }

  private AppTemplateApplication injectAppTemplateApplication(AppTemplateApplication instance) {
    AppTemplateApplication_MembersInjector.injectMFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    AppTemplateApplication_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private ApplicationProviderModule applicationProviderModule;

    private ApiProviderModule apiProviderModule;

    private Context context;

    @Override
    public AppComponent build() {
      if (applicationProviderModule == null) {
        this.applicationProviderModule = new ApplicationProviderModule();
      }
      if (apiProviderModule == null) {
        this.apiProviderModule = new ApiProviderModule();
      }
      if (context == null) {
        throw new IllegalStateException(Context.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder context(Context context) {
      this.context = Preconditions.checkNotNull(context);
      return this;
    }
  }

  private final class SplashActivitySubcomponentBuilder
      extends ActivityBindingModule_ContributeSplashScreen.SplashActivitySubcomponent.Builder {
    private SplashActivity seedInstance;

    @Override
    public ActivityBindingModule_ContributeSplashScreen.SplashActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SplashActivity.class.getCanonicalName() + " must be set");
      }
      return new SplashActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SplashActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl
      implements ActivityBindingModule_ContributeSplashScreen.SplashActivitySubcomponent {
    private SplashActivitySubcomponentImpl(SplashActivitySubcomponentBuilder builder) {}

    private GetPersistedUser getGetPersistedUser() {
      return new GetPersistedUser(new PreferencesCache());
    }

    private AndroidStrings getAndroidStrings() {
      return new AndroidStrings(DaggerAppComponent.this.context);
    }

    private AndroidLogger getAndroidLogger() {
      return new AndroidLogger(DaggerAppComponent.this.context);
    }

    private ErrorHandler getErrorHandler() {
      return new ErrorHandler(
          getAndroidStrings(),
          getAndroidLogger(),
          DaggerAppComponent.this.getNamedFunction0OfUnit());
    }

    private SplashViewModel getSplashViewModel() {
      return injectSplashViewModel(
          SplashViewModel_Factory.newSplashViewModel(getGetPersistedUser()));
    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);
    }

    private SplashViewModel injectSplashViewModel(SplashViewModel instance) {
      BaseViewModel_MembersInjector.injectErrorHandler(instance, getErrorHandler());
      return instance;
    }

    private SplashActivity injectSplashActivity(SplashActivity instance) {
      BaseActivity_MembersInjector.injectFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      SplashActivity_MembersInjector.injectViewModel(instance, getSplashViewModel());
      return instance;
    }
  }

  private final class LogInActivitySubcomponentBuilder
      extends ActivityBindingModule_ContributeLoginScreen.LogInActivitySubcomponent.Builder {
    private LogInActivity seedInstance;

    @Override
    public ActivityBindingModule_ContributeLoginScreen.LogInActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(LogInActivity.class.getCanonicalName() + " must be set");
      }
      return new LogInActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(LogInActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class LogInActivitySubcomponentImpl
      implements ActivityBindingModule_ContributeLoginScreen.LogInActivitySubcomponent {
    private LogInActivitySubcomponentImpl(LogInActivitySubcomponentBuilder builder) {}

    private DefaultUserRepository getDefaultUserRepository() {
      return new DefaultUserRepository(
          DaggerAppComponent.this.provideApiClientProvider.get(),
          new PreferencesCache(),
          new ApiUserToUserMapper());
    }

    private LogIn getLogIn() {
      return new LogIn(getDefaultUserRepository());
    }

    private AndroidStrings getAndroidStrings() {
      return new AndroidStrings(DaggerAppComponent.this.context);
    }

    private AndroidLogger getAndroidLogger() {
      return new AndroidLogger(DaggerAppComponent.this.context);
    }

    private ErrorHandler getErrorHandler() {
      return new ErrorHandler(
          getAndroidStrings(),
          getAndroidLogger(),
          DaggerAppComponent.this.getNamedFunction0OfUnit());
    }

    private LogInViewModel getLogInViewModel() {
      return injectLogInViewModel(
          LogInViewModel_Factory.newLogInViewModel(getLogIn(), new DefaultSchedulerProvider()));
    }

    @Override
    public void inject(LogInActivity arg0) {
      injectLogInActivity(arg0);
    }

    private LogInViewModel injectLogInViewModel(LogInViewModel instance) {
      BaseViewModel_MembersInjector.injectErrorHandler(instance, getErrorHandler());
      return instance;
    }

    private LogInActivity injectLogInActivity(LogInActivity instance) {
      BaseActivity_MembersInjector.injectFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      LogInActivity_MembersInjector.injectViewModel(instance, getLogInViewModel());
      return instance;
    }
  }

  private final class SignUpActivitySubcomponentBuilder
      extends ActivityBindingModule_ContributeSignUpScreen.SignUpActivitySubcomponent.Builder {
    private SignUpActivity seedInstance;

    @Override
    public ActivityBindingModule_ContributeSignUpScreen.SignUpActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(SignUpActivity.class.getCanonicalName() + " must be set");
      }
      return new SignUpActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(SignUpActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class SignUpActivitySubcomponentImpl
      implements ActivityBindingModule_ContributeSignUpScreen.SignUpActivitySubcomponent {
    private SignUpActivitySubcomponentImpl(SignUpActivitySubcomponentBuilder builder) {}

    private DefaultUserRepository getDefaultUserRepository() {
      return new DefaultUserRepository(
          DaggerAppComponent.this.provideApiClientProvider.get(),
          new PreferencesCache(),
          new ApiUserToUserMapper());
    }

    private SignUp getSignUp() {
      return new SignUp(getDefaultUserRepository());
    }

    private AndroidStrings getAndroidStrings() {
      return new AndroidStrings(DaggerAppComponent.this.context);
    }

    private AndroidLogger getAndroidLogger() {
      return new AndroidLogger(DaggerAppComponent.this.context);
    }

    private ErrorHandler getErrorHandler() {
      return new ErrorHandler(
          getAndroidStrings(),
          getAndroidLogger(),
          DaggerAppComponent.this.getNamedFunction0OfUnit());
    }

    private SignUpViewModel getSignUpViewModel() {
      return injectSignUpViewModel(
          SignUpViewModel_Factory.newSignUpViewModel(getSignUp(), new DefaultSchedulerProvider()));
    }

    @Override
    public void inject(SignUpActivity arg0) {
      injectSignUpActivity(arg0);
    }

    private SignUpViewModel injectSignUpViewModel(SignUpViewModel instance) {
      BaseViewModel_MembersInjector.injectErrorHandler(instance, getErrorHandler());
      return instance;
    }

    private SignUpActivity injectSignUpActivity(SignUpActivity instance) {
      BaseActivity_MembersInjector.injectFragmentInjector(
          instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfFragment());
      SignUpActivity_MembersInjector.injectSchedulerProvider(
          instance, new DefaultSchedulerProvider());
      SignUpActivity_MembersInjector.injectViewModel(instance, getSignUpViewModel());
      return instance;
    }
  }
}
