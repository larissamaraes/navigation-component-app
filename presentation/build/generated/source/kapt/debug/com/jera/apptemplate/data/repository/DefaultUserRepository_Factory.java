// Generated by Dagger (https://google.github.io/dagger).
package com.jera.apptemplate.data.repository;

import com.jera.apptemplate.data.client.ApiClient;
import com.jera.apptemplate.data.entity.ApiUser;
import com.jera.apptemplate.data.util.mapper.Mapper;
import com.jera.apptemplate.domain.entity.User;
import com.jera.apptemplate.domain.util.storage.Cache;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class DefaultUserRepository_Factory implements Factory<DefaultUserRepository> {
  private final Provider<ApiClient> arg0Provider;

  private final Provider<Cache> arg1Provider;

  private final Provider<Mapper<ApiUser, User>> arg2Provider;

  public DefaultUserRepository_Factory(
      Provider<ApiClient> arg0Provider,
      Provider<Cache> arg1Provider,
      Provider<Mapper<ApiUser, User>> arg2Provider) {
    this.arg0Provider = arg0Provider;
    this.arg1Provider = arg1Provider;
    this.arg2Provider = arg2Provider;
  }

  @Override
  public DefaultUserRepository get() {
    return new DefaultUserRepository(arg0Provider.get(), arg1Provider.get(), arg2Provider.get());
  }

  public static DefaultUserRepository_Factory create(
      Provider<ApiClient> arg0Provider,
      Provider<Cache> arg1Provider,
      Provider<Mapper<ApiUser, User>> arg2Provider) {
    return new DefaultUserRepository_Factory(arg0Provider, arg1Provider, arg2Provider);
  }
}
