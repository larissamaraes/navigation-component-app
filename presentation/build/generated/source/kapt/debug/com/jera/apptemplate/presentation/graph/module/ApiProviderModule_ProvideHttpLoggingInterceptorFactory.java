// Generated by Dagger (https://google.github.io/dagger).
package com.jera.apptemplate.presentation.graph.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.logging.HttpLoggingInterceptor;

public final class ApiProviderModule_ProvideHttpLoggingInterceptorFactory
    implements Factory<Interceptor> {
  private final ApiProviderModule module;

  private final Provider<HttpLoggingInterceptor.Level> logLevelProvider;

  public ApiProviderModule_ProvideHttpLoggingInterceptorFactory(
      ApiProviderModule module, Provider<HttpLoggingInterceptor.Level> logLevelProvider) {
    this.module = module;
    this.logLevelProvider = logLevelProvider;
  }

  @Override
  public Interceptor get() {
    return Preconditions.checkNotNull(
        module.provideHttpLoggingInterceptor(logLevelProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ApiProviderModule_ProvideHttpLoggingInterceptorFactory create(
      ApiProviderModule module, Provider<HttpLoggingInterceptor.Level> logLevelProvider) {
    return new ApiProviderModule_ProvideHttpLoggingInterceptorFactory(module, logLevelProvider);
  }

  public static Interceptor proxyProvideHttpLoggingInterceptor(
      ApiProviderModule instance, HttpLoggingInterceptor.Level logLevel) {
    return Preconditions.checkNotNull(
        instance.provideHttpLoggingInterceptor(logLevel),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
