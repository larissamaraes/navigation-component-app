// Generated by Dagger (https://google.github.io/dagger).
package com.jera.apptemplate.presentation.graph.module;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

public final class ApiProviderModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final ApiProviderModule module;

  private final Provider<Set<Interceptor>> interceptorsProvider;

  public ApiProviderModule_ProvideOkHttpClientFactory(
      ApiProviderModule module, Provider<Set<Interceptor>> interceptorsProvider) {
    this.module = module;
    this.interceptorsProvider = interceptorsProvider;
  }

  @Override
  public OkHttpClient get() {
    return Preconditions.checkNotNull(
        module.provideOkHttpClient(interceptorsProvider.get()),
        "Cannot return null from a non-@Nullable @Provides method");
  }

  public static ApiProviderModule_ProvideOkHttpClientFactory create(
      ApiProviderModule module, Provider<Set<Interceptor>> interceptorsProvider) {
    return new ApiProviderModule_ProvideOkHttpClientFactory(module, interceptorsProvider);
  }

  public static OkHttpClient proxyProvideOkHttpClient(
      ApiProviderModule instance, Set<Interceptor> interceptors) {
    return Preconditions.checkNotNull(
        instance.provideOkHttpClient(interceptors),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
