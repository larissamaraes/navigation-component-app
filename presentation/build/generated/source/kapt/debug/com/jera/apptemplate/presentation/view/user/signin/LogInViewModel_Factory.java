// Generated by Dagger (https://google.github.io/dagger).
package com.jera.apptemplate.presentation.view.user.signin;

import com.jera.apptemplate.domain.interactors.user.LogIn;
import com.jera.apptemplate.domain.util.provider.SchedulerProvider;
import com.jera.apptemplate.util.base.BaseViewModel_MembersInjector;
import com.jera.apptemplate.util.error.ErrorHandler;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class LogInViewModel_Factory implements Factory<LogInViewModel> {
  private final Provider<LogIn> logInProvider;

  private final Provider<SchedulerProvider> schedulerProvider;

  private final Provider<ErrorHandler> errorHandlerProvider;

  public LogInViewModel_Factory(
      Provider<LogIn> logInProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<ErrorHandler> errorHandlerProvider) {
    this.logInProvider = logInProvider;
    this.schedulerProvider = schedulerProvider;
    this.errorHandlerProvider = errorHandlerProvider;
  }

  @Override
  public LogInViewModel get() {
    LogInViewModel instance = new LogInViewModel(logInProvider.get(), schedulerProvider.get());
    BaseViewModel_MembersInjector.injectErrorHandler(instance, errorHandlerProvider.get());
    return instance;
  }

  public static LogInViewModel_Factory create(
      Provider<LogIn> logInProvider,
      Provider<SchedulerProvider> schedulerProvider,
      Provider<ErrorHandler> errorHandlerProvider) {
    return new LogInViewModel_Factory(logInProvider, schedulerProvider, errorHandlerProvider);
  }

  public static LogInViewModel newLogInViewModel(LogIn logIn, SchedulerProvider schedulerProvider) {
    return new LogInViewModel(logIn, schedulerProvider);
  }
}
