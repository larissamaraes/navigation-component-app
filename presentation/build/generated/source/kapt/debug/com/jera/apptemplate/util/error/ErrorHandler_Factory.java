// Generated by Dagger (https://google.github.io/dagger).
package com.jera.apptemplate.util.error;

import com.jera.apptemplate.domain.util.logger.Logger;
import com.jera.apptemplate.domain.util.resource.Strings;
import dagger.internal.Factory;
import javax.inject.Provider;
import kotlin.Unit;
import kotlin.jvm.functions.Function0;

public final class ErrorHandler_Factory implements Factory<ErrorHandler> {
  private final Provider<Strings> stringsProvider;

  private final Provider<Logger> loggerProvider;

  private final Provider<Function0<Unit>> loginActionProvider;

  public ErrorHandler_Factory(
      Provider<Strings> stringsProvider,
      Provider<Logger> loggerProvider,
      Provider<Function0<Unit>> loginActionProvider) {
    this.stringsProvider = stringsProvider;
    this.loggerProvider = loggerProvider;
    this.loginActionProvider = loginActionProvider;
  }

  @Override
  public ErrorHandler get() {
    return new ErrorHandler(stringsProvider.get(), loggerProvider.get(), loginActionProvider.get());
  }

  public static ErrorHandler_Factory create(
      Provider<Strings> stringsProvider,
      Provider<Logger> loggerProvider,
      Provider<Function0<Unit>> loginActionProvider) {
    return new ErrorHandler_Factory(stringsProvider, loggerProvider, loginActionProvider);
  }
}
